import { supabase } from '../config/supabase';

export const caregiverProfileService = {
  // Create a new caregiver profile
  async createProfile(profileData) {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('No authenticated user');

      // First update user role
      const { error: userError } = await supabase
        .from('users')
        .update({
          name: profileData.name,
          phone: profileData.phone,
          profile_image: profileData.profileImage,
          role: 'caregiver',
          updated_at: new Date().toISOString()
        })
        .eq('id', user.id);

      if (userError) throw userError;

      // Then create caregiver profile (caregiver_id auto-generated by trigger)
      const { data, error } = await supabase
        .from('caregiver_profiles')
        .insert({
          user_id: user.id,
          caregiver_id: '', // Auto-generated by trigger
          name: profileData.name,
          bio: profileData.bio,
          profile_image: profileData.profileImage,
          address: profileData.address,
          skills: profileData.skills || [],
          experience: profileData.experience || {},
          hourly_rate: profileData.hourlyRate,
          education: profileData.education,
          languages: profileData.languages || [],
          certifications: profileData.certifications || [],
          age_care_ranges: profileData.ageCareRanges || [],
          availability: profileData.availability || {},
          portfolio: profileData.portfolio || {},
          emergency_contacts: profileData.emergencyContacts || [],
          documents: profileData.documents || []
        })
        .select()
        .single();

      if (error) throw error;
      return { data };
    } catch (error) {
      console.error('Error creating caregiver profile:', {
        message: error.message,
        details: error.details,
        hint: error.hint,
        code: error.code
      });
      throw new Error(error.message || 'Failed to create caregiver profile');
    }
  },

  // Update existing caregiver profile
  async updateProfile(profileData) {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('No authenticated user');

      // Update user basic info
      const { error: userError } = await supabase
        .from('users')
        .update({
          name: profileData.name,
          phone: profileData.phone,
          profile_image: profileData.profileImage,
          updated_at: new Date().toISOString()
        })
        .eq('id', user.id);

      if (userError) throw userError;

      // Check if caregiver_profiles table exists and profile exists
      const { data: existingProfile, error: checkError } = await supabase
        .from('caregiver_profiles')
        .select('id')
        .eq('user_id', user.id)
        .single();

      if (checkError && checkError.code === '42P01') {
        // Table doesn't exist - create it first or return basic user data
        throw new Error('Caregiver profiles table not found. Please run the migration first.');
      }

      let data;
      if (existingProfile) {
        // Update existing profile
        const { data: updatedData, error } = await supabase
          .from('caregiver_profiles')
          .update({
            name: profileData.name,
            bio: profileData.bio,
            profile_image: profileData.profileImage,
            address: profileData.address,
            skills: profileData.skills || [],
            experience: profileData.experience || {},
            hourly_rate: profileData.hourlyRate,
            education: profileData.education,
            languages: profileData.languages || [],
            certifications: profileData.certifications || [],
            age_care_ranges: profileData.ageCareRanges || [],
            availability: profileData.availability || {},
            portfolio: profileData.portfolio || {},
            emergency_contacts: profileData.emergencyContacts || [],
            documents: profileData.documents || [],
            updated_at: new Date().toISOString()
          })
          .eq('user_id', user.id)
          .select()
          .single();
        
        if (error) throw error;
        data = updatedData;
      } else {
        // Create new profile
        const { data: newData, error } = await supabase
          .from('caregiver_profiles')
          .insert({
            user_id: user.id,
            caregiver_id: '', // Auto-generated by trigger
            name: profileData.name,
            bio: profileData.bio,
            profile_image: profileData.profileImage,
            address: profileData.address,
            skills: profileData.skills || [],
            experience: profileData.experience || {},
            hourly_rate: profileData.hourlyRate,
            education: profileData.education,
            languages: profileData.languages || [],
            certifications: profileData.certifications || [],
            age_care_ranges: profileData.ageCareRanges || [],
            availability: profileData.availability || {},
            portfolio: profileData.portfolio || {},
            emergency_contacts: profileData.emergencyContacts || [],
            documents: profileData.documents || []
          })
          .select()
          .single();
        
        if (error) throw error;
        data = newData;
      }

      return { data };
    } catch (error) {
      console.error('Error updating caregiver profile:', {
        message: error.message,
        details: error.details,
        hint: error.hint,
        code: error.code
      });
      throw new Error(error.message || 'Failed to update caregiver profile');
    }
  },

  // Get caregiver profile by user ID
  async getProfile(userId = null) {
    try {
      let targetUserId = userId;
      
      if (!targetUserId) {
        const { data: { user } } = await supabase.auth.getUser();
        if (!user) throw new Error('No authenticated user');
        targetUserId = user.id;
      }

      const { data, error } = await supabase
        .from('caregiver_profiles')
        .select('*')
        .eq('user_id', targetUserId)
        .single();

      if (error) {
        if (error.code === 'PGRST116') {
          // No profile found
          return { data: null };
        }
        throw error;
      }
      
      return { data };
    } catch (error) {
      console.error('Error getting caregiver profile:', {
        message: error.message,
        code: error.code,
        details: error.details
      });
      return { data: null, error };
    }
  },

  // Get all caregiver profiles (for browsing)
  async getAllProfiles(filters = {}) {
    try {
      let query = supabase
        .from('caregiver_profiles')
        .select(`
          *,
          users!caregiver_profiles_user_id_fkey (
            id,
            email,
            name,
            phone,
            profile_image,
            created_at
          )
        `);

      // Apply filters
      if (filters.skills && filters.skills.length > 0) {
        query = query.overlaps('skills', filters.skills);
      }

      if (filters.ageCareRanges && filters.ageCareRanges.length > 0) {
        query = query.overlaps('age_care_ranges', filters.ageCareRanges);
      }

      if (filters.minRate) {
        query = query.gte('hourly_rate', filters.minRate);
      }

      if (filters.maxRate) {
        query = query.lte('hourly_rate', filters.maxRate);
      }

      if (filters.location) {
        query = query.ilike('location', `%${filters.location}%`);
      }

      // Order by rating and trust score
      query = query.order('rating', { ascending: false });

      const { data, error } = await query;
      if (error) throw error;

      return { data };
    } catch (error) {
      console.error('Error getting caregiver profiles:', error);
      throw error;
    }
  },

  // Check if user has a caregiver profile
  async hasProfile(userId = null) {
    try {
      let targetUserId = userId;
      
      if (!targetUserId) {
        const { data: { user } } = await supabase.auth.getUser();
        if (!user) return false;
        targetUserId = user.id;
      }

      const { data, error } = await supabase
        .from('caregiver_profiles')
        .select('id')
        .eq('user_id', targetUserId)
        .single();

      if (error) {
        if (error.code === 'PGRST116') return false;
        console.error('Error checking profile:', error);
        return false;
      }
      
      return !!data;
    } catch (error) {
      console.error('Error checking caregiver profile:', error);
      return false;
    }
  },

  // Update profile rating
  async updateRating(userId, newRating) {
    try {
      const { data, error } = await supabase
        .from('caregiver_profiles')
        .update({ 
          rating: newRating,
          updated_at: new Date().toISOString()
        })
        .eq('user_id', userId)
        .select()
        .single();

      if (error) throw error;
      return { data };
    } catch (error) {
      console.error('Error updating caregiver rating:', error);
      throw error;
    }
  },

  // Add review to caregiver
  async addReview(caregiverUserId, review) {
    try {
      const { data: profile } = await this.getProfile(caregiverUserId);
      if (!profile) throw new Error('Caregiver profile not found');

      const currentReviews = profile.reviews || [];
      const updatedReviews = [...currentReviews, {
        ...review,
        createdAt: new Date().toISOString()
      }];

      // Calculate new average rating
      const totalRating = updatedReviews.reduce((sum, r) => sum + r.rating, 0);
      const newRating = totalRating / updatedReviews.length;

      const { data, error } = await supabase
        .from('caregiver_profiles')
        .update({ 
          reviews: updatedReviews,
          rating: newRating,
          updated_at: new Date().toISOString()
        })
        .eq('user_id', caregiverUserId)
        .select()
        .single();

      if (error) throw error;
      return { data };
    } catch (error) {
      console.error('Error adding review:', error);
      throw error;
    }
  }
};

export default caregiverProfileService;