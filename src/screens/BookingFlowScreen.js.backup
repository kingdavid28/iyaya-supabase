import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  ScrollView,
  TouchableOpacity,
  Alert,
  ActivityIndicator,
} from 'react-native';
import { getCaregiverDisplayName } from '../utils/caregiverUtils';
import { Ionicons } from '@expo/vector-icons';
import { useRoute, useNavigation } from '@react-navigation/native';
import CustomDateTimePicker from '../components/DateTimePicker';
import TimePicker from '../components/TimePicker';
import bookingService from '../services/bookingService';
import { useApi } from '../hooks/useApi';
import { formatDistanceToNow } from 'date-fns';
import { styles } from './styles/BookingFlowScreen.styles';

const BookingFlowScreen = () => {
  const route = useRoute();
  const navigation = useNavigation();
  const { caregiverId, jobId, caregiver: caregiverData, caregiverName: rawCaregiverName, hourlyRate } = route.params || {};
  const caregiverName = rawCaregiverName || getCaregiverDisplayName(caregiverData || caregiverId);
  
  console.log('BookingFlowScreen - Route params:', { caregiverId, jobId, caregiverName, hourlyRate });
  console.log('BookingFlowScreen - caregiverId type:', typeof caregiverId);
  console.log('BookingFlowScreen - caregiverId valid:', caregiverId ? 'Yes' : 'No');
  
  const [currentStep, setCurrentStep] = useState(1);
  const [bookingData, setBookingData] = useState({
    caregiverId,
    jobId,
    startDate: new Date(),
    endDate: new Date(Date.now() + 24 * 60 * 60 * 1000),
    startTime: '09:00',
    endTime: '17:00',
    totalHours: 8,
    hourlyRate: hourlyRate || 25,
    totalAmount: (hourlyRate || 25) * 8,
    specialInstructions: '',
    emergencyContact: '',
    children: [],
  });

  const [availableSlots, setAvailableSlots] = useState([]);
  const [conflicts, setConflicts] = useState([]);

  const {
    loading: loadingSlots,
    execute: loadAvailableSlots,
  } = useApi();

  const {
    loading: checkingConflicts,
    execute: checkConflicts,
  } = useApi();

  const {
    loading: creatingBooking,
    execute: createBooking,
  } = useApi();

  useEffect(() => {
    if (caregiverId && bookingData.startDate) {
      loadCaregiverAvailability();
    }
  }, [caregiverId, bookingData.startDate]);

  useEffect(() => {
    // Calculate total amount when hours or rate changes
    const total = bookingData.totalHours * bookingData.hourlyRate;
    setBookingData(prev => ({ ...prev, totalAmount: total }));
  }, [bookingData.totalHours, bookingData.hourlyRate]);

  const loadCaregiverAvailability = async () => {
    try {
      const dateString = bookingData.startDate.toISOString().split('T')[0];
      const slots = await loadAvailableSlots(() =>
        bookingService.getAvailableSlots(caregiverId, dateString)
      );
      
      if (slots) {
        setAvailableSlots(slots);
      }
    } catch (error) {
      Alert.alert('Error', 'Failed to load caregiver availability');
    }
  };

  const checkForConflicts = async () => {
    try {
      const result = await checkConflicts(() =>
        bookingService.checkConflicts(bookingData)
      );
      
      if (result) {
        setConflicts(result.conflicts || []);
        return result.conflicts?.length === 0;
      }
      return true;
    } catch (error) {
      Alert.alert('Error', 'Failed to check for booking conflicts');
      return false;
    }
  };

  const handleNextStep = async () => {
    if (currentStep === 2) {
      // Check for conflicts before proceeding to payment
      const noConflicts = await checkForConflicts();
      if (!noConflicts) {
        Alert.alert(
          'Booking Conflicts',
          'There are conflicts with your selected time. Please choose different times.',
          [{ text: 'OK' }]
        );
        return;
      }
    }

    if (currentStep < 3) {
      setCurrentStep(prev => prev + 1);
    } else {
      handleCreateBooking();
    }
  };

  const handlePreviousStep = () => {
    if (currentStep > 1) {
      setCurrentStep(prev => prev - 1);
    }
  };

  const handleCreateBooking = async () => {
    try {
      const result = await createBooking(() =>
        bookingService.createBooking(bookingData)
      );

      if (result) {
        Alert.alert(
          'Booking Created',
          'Your booking request has been sent to the caregiver!',
          [
            {
              text: 'OK',
              onPress: () => navigation.navigate('BookingManagementScreen'),
            },
          ]
        );
      }
    } catch (error) {
      Alert.alert('Error', error.message || 'Failed to create booking');
    }
  };

  const updateBookingData = (field, value) => {
    setBookingData(prev => ({ ...prev, [field]: value }));
  };

  const renderStepIndicator = () => (
    <View style={styles.stepIndicator}>
      {[1, 2, 3].map((step) => (
        <View key={step} style={styles.stepContainer}>
          <View style={[
            styles.stepCircle,
            currentStep >= step && styles.stepCircleActive,
            currentStep > step && styles.stepCircleCompleted
          ]}>
            {currentStep > step ? (
              <Ionicons name="checkmark" size={16} color="#fff" />
            ) : (
              <Text style={[
                styles.stepNumber,
                currentStep >= step && styles.stepNumberActive
              ]}>
                {step}
              </Text>
            )}
          </View>
          {step < 3 && (
            <View style={[
              styles.stepLine,
              currentStep > step && styles.stepLineCompleted
            ]} />
          )}
        </View>
      ))}
    </View>
  );

  const renderStepContent = () => {
    switch (currentStep) {
      case 1:
        return renderDateTimeStep();
      case 2:
        return renderDetailsStep();
      case 3:
        return renderConfirmationStep();
      default:
        return null;
    }
  };

  const renderDateTimeStep = () => (
    <View style={styles.stepContent}>
      <Text style={styles.stepTitle}>Select Date & Time</Text>
      
      <CustomDateTimePicker
        label="Start Date"
        value={bookingData.startDate}
        onDateChange={(date) => updateBookingData('startDate', date)}
        minimumDate={new Date()}
        format="long"
      />

      <CustomDateTimePicker
        label="End Date"
        value={bookingData.endDate}
        onDateChange={(date) => updateBookingData('endDate', date)}
        minimumDate={bookingData.startDate}
        format="long"
      />

      <View style={styles.row}>
        <View style={styles.halfWidth}>
          <TimePicker
            label="Start Time"
            value={bookingData.startTime}
            onTimeChange={(time) => updateBookingData('startTime', time)}
            format24Hour={true}
            minuteInterval={30}
          />
        </View>

        <View style={styles.halfWidth}>
          <TimePicker
            label="End Time"
            value={bookingData.endTime}
            onTimeChange={(time) => updateBookingData('endTime', time)}
            format24Hour={true}
            minuteInterval={30}
          />
        </View>
      </View>

      {loadingSlots && (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="small" color="#3b83f5" />
          <Text style={styles.loadingText}>Checking availability...</Text>
        </View>
      )}
    </View>
  );

  const renderDetailsStep = () => (
    <View style={styles.stepContent}>
      <Text style={styles.stepTitle}>Booking Details</Text>
      
      <View style={styles.summaryCard}>
        <Text style={styles.summaryTitle}>Booking Summary</Text>
        <View style={styles.summaryRow}>
          <Text style={styles.summaryLabel}>Caregiver:</Text>
          <Text style={styles.summaryValue}>{caregiverName}</Text>
        </View>
        <View style={styles.summaryRow}>
          <Text style={styles.summaryLabel}>Date:</Text>
          <Text style={styles.summaryValue}>
            {bookingData.startDate.toLocaleDateString()} - {bookingData.endDate.toLocaleDateString()}
          </Text>
        </View>
        <View style={styles.summaryRow}>
          <Text style={styles.summaryLabel}>Time:</Text>
          <Text style={styles.summaryValue}>
            {bookingData.startTime} - {bookingData.endTime}
          </Text>
        </View>
        <View style={styles.summaryRow}>
          <Text style={styles.summaryLabel}>Total Hours:</Text>
          <Text style={styles.summaryValue}>{bookingData.totalHours} hours</Text>
        </View>
        <View style={styles.summaryRow}>
          <Text style={styles.summaryLabel}>Hourly Rate:</Text>
          <Text style={styles.rateText}>₱{selectedCaregiver.hourlyRate || '400'}/hr</Text>
        </View>
        <View style={[styles.summaryRow, styles.totalRow]}>
          <Text style={styles.totalLabel}>Total Amount:</Text>
          <Text style={styles.totalValue}>₱{bookingData.totalAmount}</Text>
        </View>
      </View>

      {conflicts.length > 0 && (
        <View style={styles.conflictsCard}>
          <Text style={styles.conflictsTitle}>⚠️ Booking Conflicts</Text>
          {conflicts.map((conflict, index) => (
            <Text key={index} style={styles.conflictText}>
              • {conflict.message}
            </Text>
          ))}
        </View>
      )}

      {checkingConflicts && (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="small" color="#3b83f5" />
          <Text style={styles.loadingText}>Checking for conflicts...</Text>
        </View>
      )}
    </View>
  );

  const renderConfirmationStep = () => (
    <View style={styles.stepContent}>
      <Text style={styles.stepTitle}>Confirm Booking</Text>
      
      <View style={styles.confirmationCard}>
        <Ionicons name="checkmark-circle" size={48} color="#4CAF50" />
        <Text style={styles.confirmationTitle}>Ready to Book!</Text>
        <Text style={styles.confirmationText}>
          Your booking request will be sent to {caregiverName}. They will have 24 hours to accept or decline.
        </Text>
        
        <View style={styles.finalSummary}>
          <Text style={styles.finalSummaryTitle}>Final Details:</Text>
          <Text style={styles.finalSummaryText}>
            📅 {bookingData.startDate.toLocaleDateString()} - {bookingData.endDate.toLocaleDateString()}
          </Text>
          <Text style={styles.finalSummaryText}>
            ⏰ {bookingData.startTime} - {bookingData.endTime}
          </Text>
          <Text style={styles.finalSummaryText}>
            💰 ${bookingData.totalAmount} total
          </Text>
        </View>
      </View>
    </View>
  );

  return (
    <View style={styles.container}>
      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        {renderStepIndicator()}
        {renderStepContent()}
      </ScrollView>

      <View style={styles.footer}>
        <TouchableOpacity
          style={[styles.footerButton, styles.backButton]}
          onPress={handlePreviousStep}
          disabled={currentStep === 1}
        >
          <Ionicons name="arrow-back" size={20} color={currentStep === 1 ? "#ccc" : "#666"} />
          <Text style={[styles.backButtonText, currentStep === 1 && styles.disabledText]}>
            Back
          </Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={[styles.footerButton, styles.nextButton]}
          onPress={handleNextStep}
          disabled={creatingBooking || checkingConflicts}
        >
          {creatingBooking ? (
            <ActivityIndicator size="small" color="#fff" />
          ) : (
            <>
              <Text style={styles.nextButtonText}>
                {currentStep === 3 ? 'Confirm Booking' : 'Next'}
              </Text>
              <Ionicons name="arrow-forward" size={20} color="#fff" />
            </>
          )}
        </TouchableOpacity>
      </View>

    </View>
  );
};

export default BookingFlowScreen;
